package org.huxizhijian.simplerecipebook.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.huxizhijian.simplerecipebook.greendao.entity.RecipeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECIPE_ENTITY".
*/
public class RecipeEntityDao extends AbstractDao<RecipeEntity, Long> {

    public static final String TABLENAME = "RECIPE_ENTITY";

    /**
     * Properties of entity RecipeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CTgTitles = new Property(2, String.class, "cTgTitles", false, "C_TG_TITLES");
        public final static Property CTgIds = new Property(3, String.class, "cTgIds", false, "C_TG_IDS");
        public final static Property MenuId = new Property(4, String.class, "menuId", false, "MENU_ID");
        public final static Property ImgUrl = new Property(5, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Sumary = new Property(6, String.class, "sumary", false, "SUMARY");
        public final static Property Method = new Property(7, String.class, "method", false, "METHOD");
        public final static Property Ingredients = new Property(8, String.class, "ingredients", false, "INGREDIENTS");
    }


    public RecipeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RecipeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECIPE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"C_TG_TITLES\" TEXT," + // 2: cTgTitles
                "\"C_TG_IDS\" TEXT," + // 3: cTgIds
                "\"MENU_ID\" TEXT," + // 4: menuId
                "\"IMG_URL\" TEXT," + // 5: imgUrl
                "\"SUMARY\" TEXT," + // 6: sumary
                "\"METHOD\" TEXT," + // 7: method
                "\"INGREDIENTS\" TEXT);"); // 8: ingredients
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECIPE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecipeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String cTgTitles = entity.getCTgTitles();
        if (cTgTitles != null) {
            stmt.bindString(3, cTgTitles);
        }
 
        String cTgIds = entity.getCTgIds();
        if (cTgIds != null) {
            stmt.bindString(4, cTgIds);
        }
 
        String menuId = entity.getMenuId();
        if (menuId != null) {
            stmt.bindString(5, menuId);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(6, imgUrl);
        }
 
        String sumary = entity.getSumary();
        if (sumary != null) {
            stmt.bindString(7, sumary);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(8, method);
        }
 
        String ingredients = entity.getIngredients();
        if (ingredients != null) {
            stmt.bindString(9, ingredients);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecipeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String cTgTitles = entity.getCTgTitles();
        if (cTgTitles != null) {
            stmt.bindString(3, cTgTitles);
        }
 
        String cTgIds = entity.getCTgIds();
        if (cTgIds != null) {
            stmt.bindString(4, cTgIds);
        }
 
        String menuId = entity.getMenuId();
        if (menuId != null) {
            stmt.bindString(5, menuId);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(6, imgUrl);
        }
 
        String sumary = entity.getSumary();
        if (sumary != null) {
            stmt.bindString(7, sumary);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(8, method);
        }
 
        String ingredients = entity.getIngredients();
        if (ingredients != null) {
            stmt.bindString(9, ingredients);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecipeEntity readEntity(Cursor cursor, int offset) {
        RecipeEntity entity = new RecipeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cTgTitles
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cTgIds
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // menuId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imgUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sumary
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // method
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // ingredients
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecipeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCTgTitles(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCTgIds(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMenuId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSumary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMethod(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIngredients(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecipeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecipeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecipeEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
